<?php

namespace App\Controller;

use App\Entity\{{tableNamePascalCaseSingular}};
use App\Repository\{{tableNamePascalCaseSingular}}Repository;
use App\Form\{{tableNamePascalCaseSingular}}Type;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

#[Route('/api/{{tableNameKebabCasePlural}}')]
class {{tableNamePascalCaseSingular}}Controller extends AbstractController
{
    #[Route('/', name: '{{tableNameSnakeCaseSingular}}_index', methods: ['GET'])]
    public function index({{tableNamePascalCaseSingular}}Repository ${{tableNameCamelCaseSingular}}Repository): Response
    {
        ${{tableNameCamelCasePlural}} = ${{tableNameCamelCaseSingular}}Repository->findAll();
        
        return $this->json([
            'data' => ${{tableNameCamelCasePlural}},
            'message' => '{{tableNamePascalCasePlural}} retrieved successfully'
        ]);
    }

    #[Route('/{id}', name: '{{tableNameSnakeCaseSingular}}_show', methods: ['GET'])]
    public function show({{tableNamePascalCaseSingular}} ${{tableNameCamelCaseSingular}}): Response
    {
        return $this->json([
            'data' => ${{tableNameCamelCaseSingular}},
            'message' => '{{tableNamePascalCaseSingular}} retrieved successfully'
        ]);
    }
    
    #[Route('/', name: '{{tableNameSnakeCaseSingular}}_create', methods: ['POST'])]
    public function create(Request $request, {{tableNamePascalCaseSingular}}Repository ${{tableNameCamelCaseSingular}}Repository): Response
    {
        $data = json_decode($request->getContent(), true);
        ${{tableNameCamelCaseSingular}} = new {{tableNamePascalCaseSingular}}();
        
        // Set properties based on data
        
        ${{tableNameCamelCaseSingular}}Repository->save(${{tableNameCamelCaseSingular}}, true);
        
        return $this->json([
            'message' => '{{tableNamePascalCaseSingular}} created successfully',
            'data' => ${{tableNameCamelCaseSingular}}
        ], Response::HTTP_CREATED);
    }
    
    #[Route('/{id}', name: '{{tableNameSnakeCaseSingular}}_update', methods: ['PUT'])]
    public function update(Request $request, {{tableNamePascalCaseSingular}} ${{tableNameCamelCaseSingular}}, {{tableNamePascalCaseSingular}}Repository ${{tableNameCamelCaseSingular}}Repository): Response
    {
        $data = json_decode($request->getContent(), true);
        
        // Update properties based on data
        
        ${{tableNameCamelCaseSingular}}Repository->save(${{tableNameCamelCaseSingular}}, true);
        
        return $this->json([
            'message' => '{{tableNamePascalCaseSingular}} updated successfully',
            'data' => ${{tableNameCamelCaseSingular}}
        ]);
    }
    
    #[Route('/{id}', name: '{{tableNameSnakeCaseSingular}}_delete', methods: ['DELETE'])]
    public function delete({{tableNamePascalCaseSingular}} ${{tableNameCamelCaseSingular}}, {{tableNamePascalCaseSingular}}Repository ${{tableNameCamelCaseSingular}}Repository): Response
    {
        ${{tableNameCamelCaseSingular}}Repository->remove(${{tableNameCamelCaseSingular}}, true);
        
        return $this->json([
            'message' => '{{tableNamePascalCaseSingular}} deleted successfully'
        ]);
    }
} 