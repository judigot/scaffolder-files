import React from 'react';
import { GetServerSideProps } from 'next';
import { QueryClient, dehydrate } from '@tanstack/react-query';
import { I{{tableNamePascalCaseSingular}} } from '@/interfaces/I{{tableNamePascalCaseSingular}}';
import { {{tableNameCamelCaseSingular}}Api } from '@/hooks/{{tableNameKebabCaseSingular}}/api';
import { {{tableNameCamelCaseSingular}}Keys } from '@/hooks/{{tableNameKebabCaseSingular}}/use{{tableNamePascalCaseSingular}}';
import {{tableNamePascalCaseSingular}}List from '@/components/{{tableNameKebabCaseSingular}}/{{tableNamePascalCaseSingular}}List';

interface I{{tableNamePascalCaseSingular}}PageProps {
  // The props are actually in the dehydrated state
}

export default function {{tableNamePascalCaseSingular}}Page(props: I{{tableNamePascalCaseSingular}}PageProps) {
  return (
    <div className="container mx-auto py-8">
      <h1 className="text-4xl font-bold mb-8">{{tableNamePascalCaseSingular}} Management</h1>
      
      {/* The list component will use the query hook to get data from cache */}
      <{{tableNamePascalCaseSingular}}List />
    </div>
  );
}

export const getServerSideProps: GetServerSideProps = async () => {
  const queryClient = new QueryClient();
  
  // Prefetch data for the page
  await queryClient.prefetchQuery({
    queryKey: {{tableNameCamelCaseSingular}}Keys.lists(),
    queryFn: () => {{tableNameCamelCaseSingular}}Api.getAll()
  });
  
  return {
    props: {
      // Dehydrate the query cache to serialize it for the client
      dehydratedState: dehydrate(queryClient),
    },
  };
}; 