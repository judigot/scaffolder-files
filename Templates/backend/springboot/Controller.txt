package com.example.api.controller;

import com.example.api.dto.{{tableNamePascalCaseSingular}}Dto;
import com.example.api.service.{{tableNamePascalCaseSingular}}Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

@RestController
@RequestMapping("/api/{{tableNameKebabCasePlural}}")
public class {{tableNamePascalCaseSingular}}Controller {

    private final {{tableNamePascalCaseSingular}}Service {{tableNameCamelCaseSingular}}Service;

    @Autowired
    public {{tableNamePascalCaseSingular}}Controller({{tableNamePascalCaseSingular}}Service {{tableNameCamelCaseSingular}}Service) {
        this.{{tableNameCamelCaseSingular}}Service = {{tableNameCamelCaseSingular}}Service;
    }

    @GetMapping
    public ResponseEntity<Map<String, Object>> getAll{{tableNamePascalCasePlural}}() {
        List<{{tableNamePascalCaseSingular}}Dto> {{tableNameCamelCasePlural}} = {{tableNameCamelCaseSingular}}Service.findAll();
        
        Map<String, Object> response = new HashMap<>();
        response.put("data", {{tableNameCamelCasePlural}});
        response.put("message", "{{tableNamePascalCasePlural}} retrieved successfully");
        
        return ResponseEntity.ok(response);
    }

    @GetMapping("/{id}")
    public ResponseEntity<Map<String, Object>> get{{tableNamePascalCaseSingular}}(@PathVariable Long id) {
        {{tableNamePascalCaseSingular}}Dto {{tableNameCamelCaseSingular}} = {{tableNameCamelCaseSingular}}Service.findById(id);
        
        Map<String, Object> response = new HashMap<>();
        response.put("data", {{tableNameCamelCaseSingular}});
        response.put("message", "{{tableNamePascalCaseSingular}} retrieved successfully");
        
        return ResponseEntity.ok(response);
    }

    @PostMapping
    public ResponseEntity<Map<String, Object>> create{{tableNamePascalCaseSingular}}(@Valid @RequestBody {{tableNamePascalCaseSingular}}Dto {{tableNameCamelCaseSingular}}Dto) {
        {{tableNamePascalCaseSingular}}Dto created{{tableNamePascalCaseSingular}} = {{tableNameCamelCaseSingular}}Service.save({{tableNameCamelCaseSingular}}Dto);
        
        Map<String, Object> response = new HashMap<>();
        response.put("data", created{{tableNamePascalCaseSingular}});
        response.put("message", "{{tableNamePascalCaseSingular}} created successfully");
        
        return new ResponseEntity<>(response, HttpStatus.CREATED);
    }

    @PutMapping("/{id}")
    public ResponseEntity<Map<String, Object>> update{{tableNamePascalCaseSingular}}(@PathVariable Long id, @Valid @RequestBody {{tableNamePascalCaseSingular}}Dto {{tableNameCamelCaseSingular}}Dto) {
        {{tableNamePascalCaseSingular}}Dto updated{{tableNamePascalCaseSingular}} = {{tableNameCamelCaseSingular}}Service.update(id, {{tableNameCamelCaseSingular}}Dto);
        
        Map<String, Object> response = new HashMap<>();
        response.put("data", updated{{tableNamePascalCaseSingular}});
        response.put("message", "{{tableNamePascalCaseSingular}} updated successfully");
        
        return ResponseEntity.ok(response);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Map<String, Object>> delete{{tableNamePascalCaseSingular}}(@PathVariable Long id) {
        {{tableNameCamelCaseSingular}}Service.delete(id);
        
        Map<String, Object> response = new HashMap<>();
        response.put("message", "{{tableNamePascalCaseSingular}} deleted successfully");
        
        return ResponseEntity.ok(response);
    }
} 