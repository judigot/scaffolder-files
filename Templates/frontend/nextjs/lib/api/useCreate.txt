import { useMutation, useQueryClient, UseMutationOptions } from '@tanstack/react-query';
import { create{{tableNamePascalCaseSingular}} } from '@/lib/api/{{tableNameKebabCaseSingular}}/create{{tableNamePascalCaseSingular}}';
import { I{{tableNamePascalCaseSingular}} } from '@/interfaces/I{{tableNamePascalCaseSingular}}';

/**
 * Hook for creating a new {{tableNamePascalCaseSingular}}
 * @param options Optional mutation configuration
 */
export const useCreate{{tableNamePascalCaseSingular}} = (
  options?: Omit<
    UseMutationOptions<
      I{{tableNamePascalCaseSingular}},
      Error,
      Omit<I{{tableNamePascalCaseSingular}}, 'id'>
    >,
    'mutationFn'
  >
) => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: create{{tableNamePascalCaseSingular}},
    
    // Default onSuccess behavior
    onSuccess: (data) => {
      // Invalidate the list query
      queryClient.invalidateQueries({ queryKey: ['{{tableNameCamelCasePlural}}'] });
      
      // Optional: Update the cache directly for immediate UI updates
      queryClient.setQueryData(['{{tableNameCamelCaseSingular}}', String(data.id)], data);
    },
    
    // User override options
    ...options,
  });
}; 