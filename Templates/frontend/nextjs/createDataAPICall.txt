import { I{{tableNamePascalCaseSingular}} } from '@/interfaces/I{{tableNamePascalCaseSingular}}';

/**
 * Creates a new {{tableNamePascalCaseSingular}} by sending data to the API
 * @param data The {{tableNamePascalCaseSingular}} data to create (without ID)
 * @returns Promise resolving to the created {{tableNamePascalCaseSingular}} object with ID
 */
export const create{{tableNamePascalCaseSingular}} = async (
  data: Omit<I{{tableNamePascalCaseSingular}}, 'id'>
): Promise<I{{tableNamePascalCaseSingular}}> => {
  try {
    const response = await fetch('/api/{{tableNameKebabCasePlural}}', {
      method: 'POST',
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data),
    });

    if (!response.ok) {
      throw new Error(`HTTP error: ${String(response.status)}`);
    }

    const result = await response.json();
    return result.data;
  } catch (error: unknown) {
    if (typeof error === 'string') {
      throw new Error(`Failed to create {{tableNameCamelCaseSingular}}: ${error}`);
    }
    if (error instanceof Error) {
      throw new Error(`Failed to create {{tableNameCamelCaseSingular}}: ${String(error.message)}`);
    }
    throw new Error('An unknown error occurred');
  }
}; 