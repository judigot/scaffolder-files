import {
  UseQueryOptions,
  UseQueryResult,
  useQuery,
} from '@tanstack/react-query';
import { I{{tableNamePascalCaseSingular}} } from '@/interfaces/I{{tableNamePascalCaseSingular}}';

// Define query keys for better cache management
export const {{tableNameCamelCaseSingular}}Keys = {
  all: ['{{tableNameCamelCasePlural}}'] as const,
  lists: () => [...{{tableNameCamelCaseSingular}}Keys.all, 'list'] as const,
  details: () => [...{{tableNameCamelCaseSingular}}Keys.all, 'detail'] as const,
  detail: (id: number | string) => [...{{tableNameCamelCaseSingular}}Keys.details(), id] as const,
};

/**
 * Fetches {{tableNamePascalCaseSingular}} data from the API
 */
const fetch{{tableNamePascalCasePlural}} = async (): Promise<I{{tableNamePascalCaseSingular}}[]> => {
  let data: I{{tableNamePascalCaseSingular}}[];

  try {
    const response = await fetch(
      `/api/{{tableNameKebabCasePlural}}`,
      {
        method: 'GET',
        headers: {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json',
        },
      },
    );
    
    if (response.ok) {
      const result = await response.json();
      data = result.data || [];
    } else {
      throw new Error(`HTTP error: ${String(response.status)}`);
    }
  } catch (error: unknown) {
    if (typeof error === 'string') {
      throw new Error(`There was an error: ${error}`);
    }
    if (error instanceof Error) {
      throw new Error(`Failed to fetch {{tableNameCamelCasePlural}}: ${String(error.message)}`);
    }
    if (error instanceof SyntaxError) {
      throw new Error(`Syntax Error: ${String(error)}`);
    }
    throw new Error('An unknown error occurred');
  }

  return data;
};

/**
 * Fetches a single {{tableNamePascalCaseSingular}} by ID
 */
const fetch{{tableNamePascalCaseSingular}}ById = async (id: number | string): Promise<I{{tableNamePascalCaseSingular}}> => {
  let data: I{{tableNamePascalCaseSingular}};

  try {
    const response = await fetch(
      `/api/{{tableNameKebabCasePlural}}/${String(id)}`,
      {
        method: 'GET',
        headers: {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json',
        },
      },
    );
    
    if (response.ok) {
      const result = await response.json();
      data = result.data;
    } else {
      throw new Error(`HTTP error: ${String(response.status)}`);
    }
  } catch (error: unknown) {
    if (typeof error === 'string') {
      throw new Error(`There was an error: ${error}`);
    }
    if (error instanceof Error) {
      throw new Error(`Failed to fetch {{tableNameCamelCaseSingular}}: ${String(error.message)}`);
    }
    if (error instanceof SyntaxError) {
      throw new Error(`Syntax Error: ${String(error)}`);
    }
    throw new Error('An unknown error occurred');
  }

  return data;
};

/**
 * Custom hook for fetching and managing {{tableNamePascalCaseSingular}} data
 */
export const use{{tableNamePascalCaseSingular}}Data = (
  behavior?: Omit<UseQueryOptions, 'queryKey' | 'queryFn'>,
): UseQueryResult<I{{tableNamePascalCaseSingular}}[], Error> => {
  return useQuery({
    queryKey: {{tableNameCamelCaseSingular}}Keys.lists(),
    queryFn: fetch{{tableNamePascalCasePlural}},

    // Default settings that can be overridden
    refetchInterval: 30 * 1000, // 30 seconds
    staleTime: 5 * 60 * 1000, // 5 minutes
    gcTime: 10 * 60 * 1000, // 10 minutes
    refetchOnWindowFocus: 'always',
    retry: 1,
    
    ...behavior // Override defaults with passed behavior
  });
};

/**
 * Custom hook for fetching a single {{tableNamePascalCaseSingular}} by ID
 */
export const use{{tableNamePascalCaseSingular}}Details = (
  id: number | string,
  behavior?: Omit<UseQueryOptions, 'queryKey' | 'queryFn'>,
): UseQueryResult<I{{tableNamePascalCaseSingular}}, Error> => {
  return useQuery({
    queryKey: {{tableNameCamelCaseSingular}}Keys.detail(id),
    queryFn: () => fetch{{tableNamePascalCaseSingular}}ById(id),
    
    // Default settings that can be overridden
    staleTime: 5 * 60 * 1000, // 5 minutes
    gcTime: 10 * 60 * 1000, // 10 minutes
    refetchOnWindowFocus: 'always',
    retry: 1,
    
    ...behavior // Override defaults with passed behavior
  });
};