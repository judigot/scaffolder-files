import { useEffect, useMemo, useState } from 'react';
import DataTable from '@components/DataTable.tsx';
import { useIndex{{tableNamePascalCaseSingular}} } from '@/hooks/{{tableNameKebabCaseSingular}}/useIndex{{tableNamePascalCaseSingular}}.ts';
import { useCreate{{tableNamePascalCaseSingular}} } from '@/hooks/{{tableNameKebabCaseSingular}}/useCreate{{tableNamePascalCaseSingular}}.ts';
import { useUpdate{{tableNamePascalCaseSingular}} } from '@/hooks/{{tableNameKebabCaseSingular}}/useUpdate{{tableNamePascalCaseSingular}}.ts';
import { useDelete{{tableNamePascalCaseSingular}} } from '@/hooks/{{tableNameKebabCaseSingular}}/useDelete{{tableNamePascalCaseSingular}}.ts';
import { I{{tableNamePascalCaseSingular}} } from '@/interfaces/I{{tableNamePascalCaseSingular}}.ts';

export default function {{tableNamePascalCaseSingular}}Component() {
  const { data = [], isLoading, refetch } = useIndex{{tableNamePascalCaseSingular}}();
  const { mutate: createRecord } = useCreate{{tableNamePascalCaseSingular}}({ onSuccess: refetch });
  const { mutate: updateRecord } = useUpdate{{tableNamePascalCaseSingular}}();
  const { mutate: deleteRecord } = useDelete{{tableNamePascalCaseSingular}}({ onSuccess: refetch });

  const columns = useMemo(() => {
    if (data.length === 0) return [];
    return Object.keys(data[0]).filter(key => key !== 'id').map(key => ({
      accessorKey: key,
      header: key.charAt(0).toUpperCase() + key.slice(1),
      cell: (info: any) => info.getValue(),
    }));
  }, [data]);

  const handleSearch = (query: string) => {
    refetch(); // If search logic is backend-driven, update parameters in hook
  };

  return (
    <DataTable<I{{tableNamePascalCaseSingular}}>
      data={data}
      columns={columns}
      searchPlaceholder={`Search {{tableNamePascalCasePlural}}...`}
      onSearch={handleSearch}
      isLoading={isLoading}
      onDelete={(id) => deleteRecord(id)}
      onUpdate={(id, values) => updateRecord(id, values)}
    />
  );
}
